// vite.config.ts
import { defineConfig } from "file:///Users/eshankvaish/Code/devtron-fe-common-lib/node_modules/vite/dist/node/index.js";
import { resolve } from "path";
import react from "file:///Users/eshankvaish/Code/devtron-fe-common-lib/node_modules/@vitejs/plugin-react/dist/index.mjs";
import dts from "file:///Users/eshankvaish/Code/devtron-fe-common-lib/node_modules/vite-plugin-dts/dist/index.mjs";
import { libInjectCss } from "file:///Users/eshankvaish/Code/devtron-fe-common-lib/node_modules/vite-plugin-lib-inject-css/dist/index.mjs";
import svgr from "file:///Users/eshankvaish/Code/devtron-fe-common-lib/node_modules/vite-plugin-svgr/dist/index.mjs";
import { NodeGlobalsPolyfillPlugin } from "file:///Users/eshankvaish/Code/devtron-fe-common-lib/node_modules/@esbuild-plugins/node-globals-polyfill/dist/index.js";
import tsconfigPaths from "file:///Users/eshankvaish/Code/devtron-fe-common-lib/node_modules/vite-tsconfig-paths/dist/index.mjs";

// package.json
var peerDependencies = {
  "react-select": "5.8.0",
  "@rjsf/core": "^5.13.3",
  "@rjsf/utils": "^5.13.3",
  "@rjsf/validator-ajv8": "^5.13.3",
  "@typeform/embed-react": "2.20.0",
  dompurify: "^3.0.2",
  marked: "4.3.0",
  react: "^17.0.2",
  "react-dom": "^17.0.2",
  "react-draggable": "^4.4.5",
  "react-ga4": "^1.4.1",
  "react-mde": "^11.5.0",
  "react-router": "^5.3.0",
  "react-router-dom": "^5.3.0",
  rxjs: "^7.8.1",
  yaml: "^2.4.1"
};

// vite.config.ts
var __vite_injected_original_dirname = "/Users/eshankvaish/Code/devtron-fe-common-lib";
var vite_config_default = defineConfig({
  plugins: [
    tsconfigPaths(),
    react(),
    libInjectCss(),
    svgr({
      svgrOptions: {}
    }),
    dts(),
    NodeGlobalsPolyfillPlugin({
      process: true
    })
  ],
  build: {
    target: "ES2021",
    copyPublicDir: false,
    lib: {
      entry: resolve(__vite_injected_original_dirname, "lib/main.ts"),
      formats: ["es"]
    },
    rollupOptions: {
      external: [...Object.keys(peerDependencies)],
      input: "./src/index.ts",
      output: {
        assetFileNames: "assets/[name][extname]",
        entryFileNames: "[name].js"
      }
    }
  }
});
export {
  vite_config_default as default
};
//# sourceMappingURL=data:application/json;base64,
